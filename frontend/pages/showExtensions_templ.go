// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "fmt"

func ShowTokenExtensionsPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = IndexPage(ShowTokenExtensionsPartial()).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ShowMintExtensionsPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = IndexPage(ShowMintExtensionsPartial()).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ShowMintExtensionsPartial() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = backButtonAndTextDirection(
			[]DirectionParams{
				{Direction: "Dashboard", Url: "/"},
				{Direction: "Mint Extensions"},
			}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = extensionWithSwitchExtensionButton("Mint", "/showTokenExtensions").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<p class=\"font-normal text-3xl text-left mt-[3.938rem]\">Here are the various extension on the Mint account</p><p class=\"text-[#A3A3A3] font-normal text-sm text-left tracking-[0.0025em]\">Note, some extension are dependent on another, so if such extension is used, you automatically use its dependent</p>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = availableExtensions(mintExtensions).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = addExtensionButton("mint", "/mintExtensions").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = scriptForShowPagw().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var mintExtensions = []availableExtenisonsParam{
	{ExtensionName: "Metadata & Metadata Pointer Extension", PopOverContent: metadataExt},
	{ExtensionName: "Non-Transfer Token Extension", PopOverContent: nonTransferTokenExt},
	{ExtensionName: "Transfer Fee Extension", PopOverContent: transferFeeExt},
	{ExtensionName: "MintClose Authority Extension", PopOverContent: mintCloseAuthorityExt},
	{ExtensionName: "Group & Group Pointer Extension", PopOverContent: groupExt},
	{ExtensionName: "Member & Member Pointer Extension", PopOverContent: memberExt},
	{ExtensionName: "Interest Bearing Token Extension", PopOverContent: interestBearingTokenExt},
	{ExtensionName: "Permanent Delegate Extension", PopOverContent: permanentDelegateExt},
	{ExtensionName: "Transfer Hook Extension", PopOverContent: transferHookExt},
	{ExtensionName: "Default Account State Extension", PopOverContent: defaultAccountStateExt}}

func ShowTokenExtensionsPartial() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = backButtonAndTextDirection(
			[]DirectionParams{
				{Direction: "Dashboard", Url: "/"},
				{Direction: "Token Extensions"},
			}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = extensionWithSwitchExtensionButton("Token", "/showMintExtensions").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<p class=\"font-normal text-3xl text-left mt-[3.938rem] text-wrap\">Here are the various extension on the Token account</p><p class=\"text-[#A3A3A3] font-normal text-sm text-left tracking-[0.0025em] text-wrap\">Note, some extension are dependent on another, so if such extension is used, you automatically use its dependent</p>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = availableExtensions(
			[]availableExtenisonsParam{
				{ExtensionName: "Immutable Owner Extension", PopOverContent: immutableOwnerExt},
				{ExtensionName: "Required Memo Extension", PopOverContent: requiredMemoExt},
				{ExtensionName: "CPI Guard Extension", PopOverContent: cpiGuardExt},
			}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = addExtensionButton("token", "").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = scriptForShowPagw().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func scriptForShowPagw() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<style>\n\t\t.tippy-box[data-theme~='tomato'] {\n\t\t\tbackground-color: black;\n\t\t\tcolor:#EBEBEB;\n\t\t\tfont-family: 'ArchivoSemiCondensed';\n\t\t\tborder-radius: 10px;\n\t\t\tbox-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);\n\t\t\tpadding: 4px;\n\t\t\ttext-align: start;\n\t\t}\n\t</style><script src=\"/public/assets/scripts/popper.min.js\"></script><script src=\"/public/assets/scripts/tippy-bundle.umd.js\"></script><script>\n\t\ttippy('[data-tippy-content]', {\n\t\t\t\tallowHTML: true,\n\t\t\t\ttheme: 'tomato',\n\t\t\t\tanimation: 'perspective-extreme',\n\t\t\t\tinteractive: true,\n\t\t\t\tarrow: false,\n\t\t});\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var (
	metadataExt = extentionDocs(
		"Metadata & Metadata Pointer Extension",
		"enhance the interoperability of tokens across different applications and platforms by standardizing how metadata is associated and accessed",
		"https://solana.com/developers/courses/token-extensions/token-extensions-metadata")

	nonTransferTokenExt = extentionDocs(
		"Non-Transfer Token Extension",
		"enables non-transferrable (or 'soul-bound') tokens.",
		"https://solana.com/developers/courses/token-extensions/non-transferable-token")

	transferFeeExt = extentionDocs(
		"Transfer Fee Extension",
		"allows fees to be withheld on every transfer. These fees are held on the recipient's account, and can only be redeemed from the withdrawWithheldAuthority authority.",
		"https://solana.com/developers/courses/token-extensions/transfer-fee")

	mintCloseAuthorityExt = extentionDocs(
		"MintClose Authority Extension",
		"allows mint accounts to be closed, whereas the original Token Program only allows owners to close token accounts, not mint accounts.",
		"https://solana.com/developers/courses/token-extensions/close-mint")

	groupExt = extentionDocs(
		"Group & Group Pointer Extension",
		"token groups' are commonly used to implement NFT collections.",
		"https://solana.com/developers/courses/token-extensions/group-member")

	memberExt = extentionDocs(
		"Member & Member Pointer Extension",
		"token members' are also commonly used to implement NFT collections, allowing to save member data within the mint itself",
		"https://solana.com/developers/courses/token-extensions/group-member")

	interestBearingTokenExt = extentionDocs(
		"Interest Bearing Token Extension",
		"enable creators to set an interest rate and store it directly on the mint account.",
		"https://solana.com/developers/courses/token-extensions/interest-bearing-token")

	permanentDelegateExt = extentionDocs(
		"Permanent Delegate Extension",
		"holds global ownership over all token accounts associated with the mint.",
		"https://solana.com/developers/courses/token-extensions/permanent-delegate")

	transferHookExt = extentionDocs(
		"Transfer Hook Extension",
		"extension allows developers to run custom logic on their tokens on every transfer.",
		"https://solana.com/developers/courses/token-extensions/transfer-hook")

	defaultAccountStateExt = extentionDocs(
		"Default Account State Extension",
		"extension enables developers to set new token accounts for a mint with this extension to be frozen by default, requiring interaction with a specific service to unfreeze and utilize the tokens.",
		"https://solana.com/developers/courses/token-extensions/default-account-state")

	immutableOwnerExt = extentionDocs(
		"Immutable Owner Extension",
		"extension ensures that once a token account is created, its owner is unchangeable, securing the ownership against any modifications.",
		"https://solana.com/developers/courses/token-extensions/immutable-owner")

	requiredMemoExt = extentionDocs(
		"Required Memo Extension",
		"extension allows developers to mandate that all incoming transfers to a token account include a memo, facilitating enhanced transaction tracking and user identification.",
		"https://solana.com/developers/courses/token-extensions/required-memo")

	cpiGuardExt = extentionDocs(
		"CPI Guard Extension",
		"extension prohibits certain actions inside cross-program invocations.",
		"https://solana.com/developers/courses/token-extensions/cpi-guard")
)

func extentionDocs(extName, extDocs, extUrl string) string {
	return fmt.Sprintf(`
		The <b class="bg-gradient-to-r from-[#AD6AFF_0%%] to-[#12DB88_100%%] bg-clip-text text-transparent text-nowrap">%s</b>
		%s
		<br/><br/> see here for <a href="%s" target=_blank" rel="noopener noreferrer" class="bg-gradient-to-r from-[#AD6AFF_0%%] to-[#12DB88_100%%] bg-clip-text text-transparent text-nowrap">more information  <img class="inline w-2 aspect-square" src="/public/assets/svg/open-in-new-tab.svg"/></a>`,
		extName, extDocs, extUrl)
}

var _ = templruntime.GeneratedTemplate
